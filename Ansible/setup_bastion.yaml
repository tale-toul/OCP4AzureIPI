---
- name: Local actions for localhost
  hosts: 127.0.0.1
  connection: local
  become: no
  tasks:
    - name: Remove stale entries from known_hosts file in the ansible host
      command: ssh-keygen -R {{ item }}
      with_items: "{{ groups['all'] }}"
    - name: Save terraform variables to a file
      shell: terraform output |tr '=' ':' > ../Ansible/group_vars/all/terraform_outputs.var
      args:
        chdir: ../Terraform
    - name: Load terraform output variables
      include_vars:
        file: group_vars/all/terraform_outputs.var
    - name: Update inventory file
      blockinfile:
        path: inventory
        block: "{{ bastion_public_ip }}"
        insertafter: "[bastion]"
    - name: Reload inventory
      meta: refresh_inventory
    - name: Validate cluster_scope variable
      assert:
        that: cluster_scope is match('^(public|private)$')
        msg: "cluster_scope must be defined as public or private"
- name: Setup bastion host
  hosts: bastion
  gather_facts: no
  tasks:
    - name: Load terraform output variables
      include_vars:
        file: group_vars/all/terraform_outputs.var
    - name: Get /home LV size
      shell:
        lvs --noheadings --units m -o lv_size /dev/rootvg/homelv|cut -d. -f1
      register: _lvhome_size
      changed_when: false
    - name: Extend /home logical volume
      lvol:
        vg: rootvg
        lv: homelv
        size: +1024m
        resizefs: true
      ignore_errors: true
      when: _lvhome_size.stdout | int < 2548
    - name: Install required packages
      yum:
        state: latest
        name:
          - tmux
    - name: Download oc client file to the bastion
      unarchive:
        src: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_version }}/openshift-client-linux.tar.gz
        dest: /usr/local/bin
        remote_src: yes
        mode: '0755'
    - name: Download openshift-installer to the bastion
      unarchive:
        src: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_version }}/openshift-install-linux.tar.gz
        dest: /usr/local/bin
        remote_src: yes
        mode: '0755'
    - name: Create {{ cluster_name }} directory
      file:
        path: OCP4/{{ cluster_name }}
        state: directory
        owner: azureuser
        mode: '0750'
    - name: Create ~/.azure directory
      file:
        path: .azure
        state: directory
        owner: azureuser
        mode: '0700'
    - name: Render install-config jinja2 template
      template:
        src: install-config.j2
        dest: OCP4/{{ cluster_name }}/install-config.yaml
        owner: azureuser
        mode: 0644
...
